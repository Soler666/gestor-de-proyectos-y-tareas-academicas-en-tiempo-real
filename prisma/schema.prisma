// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  username       String  @unique
  role           String
  password       String
  projects       Project[] @relation("ProjectParticipants")
  tasks          Task[]    @relation("UserTasks")
  tutorProjects  Project[] @relation("ProjectTutor")
  tutoredTasks   Task[]    @relation("TutorTasks")
  chatMessages   ChatMessage[] @relation("ChatUser")
  receivedMessages ChatMessage[] @relation("MessageRecipient")
  notifications  Notification[] @relation("UserNotifications")
  reminders      Reminder[] @relation("UserReminders")
  studentSubmissions Submission[] @relation("StudentSubmissions")
  tutorGradings  Submission[] @relation("TutorGradings")
  activityLogs   ActivityLog[] @relation("UserActivityLogs")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      String   // Planificaci贸n, En progreso, Completado, Pausado
  tasks       Task[]
  participants User[] @relation("ProjectParticipants")
  tutor       User?    @relation("ProjectTutor", fields: [tutorId], references: [id])
  tutorId     Int?
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  dueDate     DateTime?
  priority    String   // Baja, Media, Alta
  status      String   // Pendiente, En progreso, Completada, Bloqueada
  type        String   @default("project")  // "daily" o "project"
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   Int?
  responsible User     @relation("UserTasks", fields: [responsibleId], references: [id])
  responsibleId Int
  tutor       User?    @relation("TutorTasks", fields: [tutorId], references: [id])
  tutorId     Int?
  submissions Submission[]
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("ChatUser", fields: [userId], references: [id])
  message     String
  timestamp   DateTime @default(now())
  recipientId Int?     // Para mensajes privados
  recipient   User?    @relation("MessageRecipient", fields: [recipientId], references: [id])
  isPrivate   Boolean  @default(false)
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("UserNotifications", fields: [userId], references: [id])
  message     String
  type        String   // task_assigned, project_assigned, deadline_reminder, status_update, etc.
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  relatedId   Int?     // ID de la tarea o proyecto relacionado
  relatedType String?  // "task" o "project"
}

model Reminder {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("UserReminders", fields: [userId], references: [id])
  title       String
  description String?
  scheduledAt DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  relatedId   Int?     // ID de la tarea o proyecto relacionado
  relatedType String?  // "task" o "project"
}

model File {
  id          Int      @id @default(autoincrement())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  uploadedAt  DateTime @default(now())
  submission  Submission? @relation(fields: [submissionId], references: [id])
  submissionId Int?
}

model Submission {
  id          Int      @id @default(autoincrement())
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
  studentId   Int
  student     User     @relation("StudentSubmissions", fields: [studentId], references: [id])
  submittedAt DateTime @default(now())
  content     String?  // Texto adicional del estudiante
  grade       Float?   // Calificaci贸n del tutor (0-100)
  feedback    String?  // Comentarios del tutor
  gradedAt    DateTime?
  gradedBy    Int?     // ID del tutor que calific贸
  gradedByUser User?   @relation("TutorGradings", fields: [gradedBy], references: [id])
  status      String   @default("submitted") // "submitted", "graded", "returned"
  files       File[]
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("UserActivityLogs", fields: [userId], references: [id])
  action      String   // CREATE, UPDATE, DELETE, STATUS_CHANGE, ASSIGN, etc.
  entityType  String   // TASK, PROJECT, USER, CHAT_MESSAGE, etc.
  entityId    Int      // ID de la entidad afectada
  details     String?  // Descripci贸n detallada de la actividad
  oldValues   String?  // Valores anteriores en formato JSON
  newValues   String?  // Valores nuevos en formato JSON
  timestamp   DateTime @default(now())
}
