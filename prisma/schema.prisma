// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  username       String  @unique
  role           String
  password       String
  projects       Project[] @relation("ProjectParticipants")
  tasks          Task[]    @relation("UserTasks")
  tutorProjects  Project[] @relation("ProjectTutor")
  tutoredTasks   Task[]    @relation("TutorTasks")
  chatMessages   ChatMessage[] @relation("ChatUser")
  receivedMessages ChatMessage[] @relation("MessageRecipient")
  notifications  Notification[] @relation("UserNotifications")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      String   // Planificaci√≥n, En progreso, Completado, Pausado
  tasks       Task[]
  participants User[] @relation("ProjectParticipants")
  tutor       User?    @relation("ProjectTutor", fields: [tutorId], references: [id])
  tutorId     Int?
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  dueDate     DateTime?
  priority    String   // Baja, Media, Alta
  status      String   // Pendiente, En progreso, Completada, Bloqueada
  type        String   @default("project")  // "daily" o "project"
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   Int?
  responsible User     @relation("UserTasks", fields: [responsibleId], references: [id])
  responsibleId Int
  tutor       User?    @relation("TutorTasks", fields: [tutorId], references: [id])
  tutorId     Int?
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("ChatUser", fields: [userId], references: [id])
  message     String
  timestamp   DateTime @default(now())
  recipientId Int?     // Para mensajes privados
  recipient   User?    @relation("MessageRecipient", fields: [recipientId], references: [id])
  isPrivate   Boolean  @default(false)
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("UserNotifications", fields: [userId], references: [id])
  message     String
  type        String   // task_assigned, project_assigned, deadline_reminder, status_update, etc.
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  relatedId   Int?     // ID de la tarea o proyecto relacionado
  relatedType String?  // "task" o "project"
}
